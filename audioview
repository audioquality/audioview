#!/bin/bash
# 
# View audio file as a waveform.
# Display corresponding info from dr14.txt, loudness.txt,
# and some track info as overlay. Use local cache for speedup.
#
# dependencies: audiowaveform (https://github.com/bbcrd/audiowaveform)
#               exiftool
#               imagemagick
#               feh
#               vorbis-tools
#
# by dev@audioquality.org
#
# License: WTFPL
# This work is free. You can redistribute it and/or modify it under the
# terms of the Do What The Fuck You Want To Public License, Version 2,
# as published by Sam Hocevar. See http://www.wtfpl.net/ for more details.
#
################################################################################################
# full path to audiowaveform binary:
AUDIOWAVEFORM=$(command -v audiowaveform)
# audiowaveform x-axis resolution
PIXELS_PER_SECOND=5
# preview cache subdirectory
CACHEDIR=audioview

if [ ! -x "$AUDIOWAVEFORM" ]; then
  printf "Error: audiowaveform not found\n"
  exit 1
fi
if [ ! -x "$(command -v exiftool)" ]; then
  printf "Error: exiftool not found\n"
  exit 1
fi
if [ ! -x "$(command -v convert)" ]; then
  printf "Error: imagemagick not found\n"
  exit 1
fi
if [ ! -x "$(command -v feh)" ]; then
  printf  "Error: feh not found\n"
  exit 1
fi

SRCPATH=$(readlink -f "$1")
SRCDIR=$(dirname "$SRCPATH")
FNAME=$(printf "%s" "$SRCPATH" | sed 's/\\$/\\\\$/' | grep -o '[^/]*$')

# Audio file must exist
[ -r "$SRCPATH" ] || exit

CACHEPATH="$SRCDIR/$CACHEDIR"
if [ ! -d "$CACHEPATH" ]; then
  mkdir "$CACHEPATH" 2>/dev/null
  if [ ! -d "$CACHEPATH" ]; then
    CACHEPATH=~/.cache/"$CACHEDIR"
    if [ ! -d "$CACHEPATH" ]; then
      mkdir "$CACHEPATH" 2>/dev/null
      if [ ! -d "$CACHEPATH" ]; then
        printf "Error: cache $CACHEPATH cannot be created\n"
        exit 1
      fi
      # PNG filename as dirname+audiofile name, with extension replaced
      TEMPIMAGE="$CACHEPATH/$(printf "%s" "$SRCPATH" | grep -Eo '[^/]+/[^/]+$' | sed 's/\// - /' | sed 's/[^.]*$/png/')"
    fi
  fi
fi

# PNG filename same as audio file name, with extension replaced
[ -z "$TEMPIMAGE" ] && TEMPIMAGE="$CACHEPATH/$(printf "%s" "$FNAME" | sed 's/[^.]*$/png/')"

# Generate Audio View PNG, if it doesn't exist
if [ ! -s "$TEMPIMAGE" ]; then
  # get file info
  FILEINFO=$(exiftool -S "$SRCPATH" 2>/dev/null)
  
  DURATION=$(printf "%s" "$FILEINFO" | grep -i -m 1 Duration:)
  if [[ $DURATION =~ ([0-9]+):([0-9]+):([0-9]+) ]]; then
    LENGTH=$(expr ${BASH_REMATCH[1]} \* 3600 + ${BASH_REMATCH[2]} \* 60 + ${BASH_REMATCH[3]} + 1)
  elif [[ $DURATION =~ ([0-9]+)\.[0-9]+.*s ]]; then
    LENGTH=$(expr ${BASH_REMATCH[1]} + 1)
  fi
  # check audio length
  if [ -z "$LENGTH" ]; then
    printf "Cannot determine length of audio file\n"
    exit 1
  fi
  # calculate required png width in pixels
  WIDTH=$(expr $LENGTH \* $PIXELS_PER_SECOND)
  
  # detect ogg and convert to wav (ogg support for audiowaveform)
  if $(file "$SRCPATH" | grep -q "Vorbis audio"); then
    AUDIOFILE=$TEMPIMAGE.wav
    oggdec -o "$AUDIOFILE" "$SRCPATH" 2>/dev/null
  else
    AUDIOFILE="$SRCPATH"
  fi
    
  # parse file info
  SIDE=$(printf "%s" "$FILEINFO" | grep -i -m 1 Side: | sed 's/.*:\s*//')
  BITRATE=$(printf "%s" "$FILEINFO" | grep -i -m 1 AudioBitrate: | sed 's/.*:\s*//')
  TRACKNR=$(printf "%s" "$FILEINFO" | grep -i -m 1 -E 'Track(N[^:]*r)?:' | sed 's/.*:\s*//' | sed 's/\/.*//')
  TRACKNAME=$(printf "%s" "$FILEINFO" | grep -i -m 1 Title: | sed 's/[^:]*:\s*//')
  ARTIST=$(printf "%s" "$FILEINFO" | grep -i -m 1 Artist: | sed 's/[^:]*:\s*//')
  ALBUM=$(printf "%s" "$FILEINFO" | grep -i -m 1 Album: | sed 's/[^:]*:\s*//')
  DATE=$(printf "%s" "$FILEINFO" | grep -i -m 1 -E '^Date(TimeOriginal)?:' | sed 's/.*:\s*//')
  YEAR=$(printf "%s" "$FILEINFO" | grep -i -m 1 -E '^Year:' | sed 's/.*:\s*//')
  if [ -z "$DATE" -a -n "$YEAR" ]; then
    DATE=$YEAR
  fi
  
  # define overlay data
  cd "$SRCDIR"
  LINE_META=$(printf "%s" "$ARTIST" | sed 's/\\$/\\\\$/')" - "$(printf "%s" "$ALBUM" | sed 's/\\$/\\\\$/')" ($DATE) - $SIDE$TRACKNR - "$(printf "%s" "$TRACKNAME" | sed 's/\\$/\\\\$/')
  LINE_EBU128=$(find -iname loudness.txt -exec sh -c "grep -o \".*$FNAME\" '{}' " \; -quit | grep -Po '\S.*dBTP' | tr -s ' ' | head -n 1)
  LINE_DR=$(find \( -iname dr14.txt -o -iname foo_dr.txt \) -exec sh -c "grep -E \"DR.*\s0?$TRACKNR\s*\-\" '{}' " \; | grep -Fi "$(printf "%s" "$TRACKNAME" | sed 's/[?!*]//')" | grep -Eo 'DR[0-9]+' | head -n 1)
  
  # generate png file
  $AUDIOWAVEFORM -i "$AUDIOFILE" -o "$TEMPIMAGE" --pixels-per-second $PIXELS_PER_SECOND \
  -w $WIDTH -h 512 --compression 5 --background-color 000000 --border-color 996666 --axis-label-color BBBBBB
  
  if [ ! -s "$TEMPIMAGE" ]; then
    printf "FAIL: Audiowaveform file was not generated.\n"
    exit 1
  fi
  
  # find font
  FONT="$(find /usr/share/fonts -name 'DejaVuSansMono.ttf' -printf '%p' -quit)"
  [ -z "$FONT" ] && FONT="$(find /usr/share/fonts -name 'Inconsolata.otf' -printf '%p' -quit)"
  # put overlay into png
  convert -pointsize 15 -fill white -font "$FONT" \
  -draw "text 10,456 \"$LINE_META\"" \
  -draw "text 10,473 '$LINE_EBU128'" \
  -draw "text 10,491 '$LINE_DR'" \
  -draw "text 10,508 '$BITRATE'" "$TEMPIMAGE" "$TEMPIMAGE"
  
  # clean up
  rm "$TEMPIMAGE"*wav 2>/dev/null
  
fi

# view waveform
feh --borderless --no-menus --no-screen-clip "$TEMPIMAGE" 2>/dev/null &

# delete old files from user cache
[ -d ~/.cache/"$CACHEDIR" ] && find ~/.cache/"$CACHEDIR" -maxdepth 1 -type f -mtime +30 -delete 2>/dev/null

exit
